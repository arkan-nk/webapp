Index: src/ru/javawebinar/webapp/storage/PathStorage.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/ru/javawebinar/webapp/storage/PathStorage.java	(revision )
+++ src/ru/javawebinar/webapp/storage/PathStorage.java	(revision )
@@ -0,0 +1,9 @@
+package ru.javawebinar.webapp.storage;
+
+/**
+ * GKislin
+ * 23.10.2015.
+ */
+// TODO Optional
+public class PathStorage {
+}
Index: src/ru/javawebinar/webapp/storage/DataStreamFileStorage.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/ru/javawebinar/webapp/storage/DataStreamFileStorage.java	(revision )
+++ src/ru/javawebinar/webapp/storage/DataStreamFileStorage.java	(revision )
@@ -0,0 +1,110 @@
+package ru.javawebinar.webapp.storage;
+
+import ru.javawebinar.webapp.ResumeStorageException;
+import ru.javawebinar.webapp.model.ContactType;
+import ru.javawebinar.webapp.model.Resume;
+
+import java.io.*;
+import java.util.List;
+import java.util.Map;
+
+/**
+ * GKislin
+ * 23.10.2015.
+ */
+public class DataStreamFileStorage extends AbstractFileStorage {
+
+    protected final File directory;
+
+    public DataStreamFileStorage(String path) {
+        directory = new File(path);
+        if (!directory.isDirectory()) {
+            throw new IllegalArgumentException(path + " is not directory");
+        }
+    }
+
+    @Override
+    protected File getContext(String uuid) {
+        return new File(directory, uuid);
+    }
+
+    @Override
+    protected boolean exist(File file) {
+        return file.isFile();
+    }
+
+    @Override
+    protected void doClear() {
+        File[] files = directory.listFiles();
+        if (files != null) {
+            for (File file : files) {
+                doDelete(file);
+            }
+        }
+    }
+
+    @Override
+    protected void doSave(Resume r, File file) {
+        try {
+            if (!file.createNewFile()) {
+                throw new ResumeStorageException(r.getUuid(), "Couldn't create file " + file.getAbsolutePath());
+            }
+            try (DataOutputStream dos = new DataOutputStream(new FileOutputStream(file))) {
+                dos.writeUTF(r.getFullName());
+                dos.writeUTF(r.getAbout());
+
+                dos.writeInt(r.getContacts().size());
+                for (Map.Entry<ContactType, String> entry : r.getContacts().entrySet()) {
+                    dos.writeUTF(entry.getKey().name());
+                    dos.writeUTF(entry.getValue());
+                }
+            }
+            //TODO implements section
+        } catch (IOException e) {
+            throw new ResumeStorageException(r.getUuid(), "File write error", e);
+        }
+    }
+
+    @Override
+    protected void doUpdate(Resume r, File file) {
+
+    }
+
+    @Override
+    protected Resume doGet(File file) {
+        String uuid = file.getName();
+        try {
+            try (DataInputStream dis = new DataInputStream(new FileInputStream(file))) {
+                String fullName = dis.readUTF();
+                String about = dis.readUTF();
+                Resume r = new Resume(file.getName(), fullName, about);
+
+                int contactSize = dis.readInt();
+                for (int i = 0; i < contactSize; i++) {
+                    r.addContact(ContactType.valueOf(dis.readUTF()), dis.readUTF());
+                }
+                //TODO implements section
+                return r;
+            }
+        } catch (IOException e) {
+            throw new ResumeStorageException(uuid, "File read error", e);
+        }
+    }
+
+    @Override
+    protected void doDelete(File file) {
+        if (!file.delete()) {
+            throw new ResumeStorageException("File delete error", file.getName());
+        }
+    }
+
+    @Override
+    protected List<Resume> getAll() {
+        return null;
+    }
+
+    @Override
+    public int getSize() {
+        return 0;
+    }
+}
Index: test/ru/javawebinar/webapp/storage/DataStreamFileStorageTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- test/ru/javawebinar/webapp/storage/DataStreamFileStorageTest.java	(revision )
+++ test/ru/javawebinar/webapp/storage/DataStreamFileStorageTest.java	(revision )
@@ -0,0 +1,13 @@
+package ru.javawebinar.webapp.storage;
+
+/**
+ * GKislin
+ * 09.10.2015.
+ */
+public class DataStreamFileStorageTest extends AbstractStorageTest {
+    private static final String STORAGE = ".\\storage";
+
+    public DataStreamFileStorageTest() {
+        super(new DataStreamFileStorage(STORAGE));
+    }
+}
Index: src/ru/javawebinar/webapp/storage/AbstractFileStorage.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/ru/javawebinar/webapp/storage/AbstractFileStorage.java	(revision )
+++ src/ru/javawebinar/webapp/storage/AbstractFileStorage.java	(revision )
@@ -0,0 +1,11 @@
+package ru.javawebinar.webapp.storage;
+
+import java.io.File;
+
+/**
+ * GKislin
+ * 23.10.2015.
+ */
+//TODO implement. Handle all IOException here
+public abstract class AbstractFileStorage extends AbstractStorage<File> {
+}
Index: src/ru/javawebinar/webapp/storage/AbstractStorage.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/ru/javawebinar/webapp/storage/AbstractStorage.java	(date 1460793591000)
+++ src/ru/javawebinar/webapp/storage/AbstractStorage.java	(revision )
@@ -89,13 +89,13 @@
 
     private void mustNotExist(String uuid, C ctx) {
         if (exist(ctx)) {
-            throw new ResumeStorageException("Resume is already exist in storage", uuid);
+            throw new ResumeStorageException(uuid, "Resume is already exist in storage");
         }
     }
 
     private void mustExist(String uuid, C ctx) {
         if (!exist(ctx)) {
-            throw new ResumeStorageException("Resume not found in storage", uuid);
+            throw new ResumeStorageException(uuid, "Resume not found in storage");
         }
     }
 
Index: src/ru/javawebinar/webapp/model/Resume.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/ru/javawebinar/webapp/model/Resume.java	(date 1460793591000)
+++ src/ru/javawebinar/webapp/model/Resume.java	(revision )
@@ -27,6 +27,31 @@
         this.about = about;
     }
 
+
+    public String getUuid() {
+        return uuid;
+    }
+
+    public String getFullName() {
+        return fullName;
+    }
+
+    public void setFullName(String fullName) {
+        this.fullName = fullName;
+    }
+
+    public String getAbout() {
+        return about;
+    }
+
+    public Map<ContactType, String> getContacts() {
+        return contacts;
+    }
+
+    public Map<SectionType, Section> getSections() {
+        return sections;
+    }
+
     public void addContact(ContactType type, String value) {
         contacts.put(type, value);
     }
@@ -74,13 +99,5 @@
         Resume other = (Resume) o;
         int cmp = fullName.compareTo(other.fullName);
         return cmp == 0 ? uuid.compareTo(other.uuid) : cmp;
-    }
-
-    public String getUuid() {
-        return uuid;
-    }
-
-    public void setFullName(String fullName) {
-        this.fullName = fullName;
     }
 }
